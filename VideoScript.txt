This is the demo video for COMP237 Lab Assignment on "Search"

For ex.1, a graph is given and i stored in a dictionary structure named Connections in GraphData
Queue is used. 
All the necessary logic are built in the function BFS_YuenKwan.
the function accepts 3 arguments, the graphName, initial state, goal state.
in order to demonstrate Req. 6-8, some negative test cases are built.
in the 1st run, dolly needs to get introduced to me
the path will traverse from Dolly -> Bob -> Adam and finally reaches me.
in the 2nd run, George needs to get introduced to Bob
the path will traverse from George -> me -> Adam and reaches Bob.
For Req6-8, some messages will be shown accordingly in the negative cases.

For Ex.2, the location map searh example will be reused.
initial state is Bus Stop.
goal state is AI lab.
Uniform Cost Search makes use of Priority Queue.
I will need to keep track of the visted nodes.
UCS solely counts on the cost, in here, that is the distance from location 1 to location 2.
In this example, all of the 3 search algorithm results in optimal solution
but in fact the Greedy search does not alway have it,
while A* and UCS gurantees to have the optimal solution.
Whether A* performance outweigh UCS, it will depends on how the heuristic function is set for A*.
UCS reaches optimal solution by exploreing nodes in all directions, but result in slow performance. here we can see there is quite a lot of nodes expanded.

For ex.3, 
part A, the path from initial state goes by moving 
6 downward,
8 downward,
2 to the right
1 upward.

part B, the number of misplaced tiles is not a good heuristic function for 8-puzzle game.
it failed to fulfil the consistency feature of a good heuristic when going from depth 1 to depth 2.

part C, modify the heuristic to be "the number of miplaced tiles with total Manhattan distance"
will solve the inconsistentcy.
